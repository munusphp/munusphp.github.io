(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{130:function(e,t,l){"use strict";l.r(t),l.d(t,"frontMatter",(function(){return r})),l.d(t,"rightToc",(function(){return i})),l.d(t,"default",(function(){return o}));l(51),l(24),l(19),l(20),l(52),l(0);var n=l(166);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e}).apply(this,arguments)}var r={id:"data-structures",title:"Data structures",sidebar_label:"Data structures"},i=[{value:"Value",id:"value",children:[]},{value:"Traversable",id:"traversable",children:[]},{value:"Collectors",id:"collectors",children:[]}],c={rightToc:i},b="wrapper";function o(e){var t=e.components,l=function(e,t){if(null==e)return{};var l,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,["components"]);return Object(n.b)(b,a({},c,l,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Functional programming is all about values. ",Object(n.b)("inlineCode",{parentName:"p"},"Value")," is the basic and most important type of this library.\nWhat you need to know about ",Object(n.b)("inlineCode",{parentName:"p"},"Value"),":"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"it is immutable by default"),Object(n.b)("li",{parentName:"ul"},"it is generic wrapper"),Object(n.b)("li",{parentName:"ul"},"it can be empty"),Object(n.b)("li",{parentName:"ul"},"it can be safely compared with other value")),Object(n.b)("p",null,"Each value class extends base ",Object(n.b)("inlineCode",{parentName:"p"},"Value")," which contains generic ",Object(n.b)("inlineCode",{parentName:"p"},"template")," annotation.\nThis allow us to use values as wrapper for our custom domain types.\nRead ",Object(n.b)("a",a({parentName:"p"},{href:"/docs/generic-types"}),"Generic types")," tab to learn more about how Munus uses generic types."),Object(n.b)("h2",{id:"value"},"Value"),Object(n.b)("p",null,"Basic operations:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"get()")," - returns the underlying value"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"getOrElse($other)")," - returns the underlying value if present, otherwise return $other"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"getOrElseThrow(Throwable $throwable)")," -  returns the underlying value if present, otherwise throws $throwable"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"getOrElseTry(callable $supplier)")," - returns the underlying value if present, otherwise returns the result of $supplier"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"getOrNull()")," - returns the underlying value if present, otherwise returns null"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"map(callable $mapper)")," - maps the underlying value to a different type")),Object(n.b)("p",null,"Equality checks:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"equals($object): bool")," - checks, if types are equals, for collections it checks if all values are equal and on the same order ")),Object(n.b)("p",null,"Iterable extensions:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"contains($element): bool")," - checks, if the given element is contained"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"exists(callable $predicate): bool")," - checks, if an element exists such that the predicate holds "),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"forEach(callable $consumer)")," - performs an action on each element"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"forAll(callable $predicate)")," - checks, if the given predicate is true for all elements"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"iterator()")," - returns appropriate ",Object(n.b)("inlineCode",{parentName:"li"},"Iterator")," which allows to iterate through all elements ")),Object(n.b)("p",null,"Side-effects:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"peek(callable $action)")," - performs given action on first element")),Object(n.b)("p",null,"Tests:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"isEmpty(): bool")," - checks, if the underlying value is absent"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"isSingleValued(): bool"),"- states whether this is a single-valued type")),Object(n.b)("p",null,"Type conversion:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"collect(Collector $collector)")," - collects the underlying value(s) (if present) using the provided $collector, available collectors are described below"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"toOption()")," - converts value to an ",Object(n.b)("inlineCode",{parentName:"li"},"Option")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"ToStream()")," - converts value to a ",Object(n.b)("inlineCode",{parentName:"li"},"Stream"))),Object(n.b)("h2",{id:"traversable"},"Traversable"),Object(n.b)("p",null,"An interface for inherently recursive, multi-valued data structures. The order of elements is determined by\nIterator, which may vary each time it is called."),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"Traversable")," extends ",Object(n.b)("inlineCode",{parentName:"p"},"Value"),", so each above methods are also available for each ",Object(n.b)("inlineCode",{parentName:"p"},"Traversable"),".  "),Object(n.b)("p",null,"Basic operations:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"length()")," - computes the number of elements of this traversable"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"head()")," - returns the first element"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"tail()")," - drops the first element and return new Traversable containing all elements except the first")),Object(n.b)("p",null,"Numeric operations:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"average()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"min()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"max()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"product()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"sum()"))),Object(n.b)("p",null,"Reduction:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"count(callable $predicate):int")," - counts the elements which satisfy the given predicate"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"fold($zero, callable $combine)")," - folds this elements starting with $zero and successively calling $combine"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"reduce(callable $operation)")," - accumulates the elements by successively calling the given $operation")),Object(n.b)("p",null,"Selection:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"dropWhile(callable $predicate)")," - drops elements while the predicate holds for the current element"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"dropUntil(callable $predicate)")," - drops elements until the predicate holds for the current element"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"filter(callable $predicate)")," - returns a new traversable consisting of all elements which satisfy the given predicate"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"filterNot(callable $predicate)")," - returns a new traversable consisting of all elements which do not satisfy the given predicate")),Object(n.b)("h2",{id:"collectors"},"Collectors"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::toList()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::toSet()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::toMap(callable $keyProvider)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::summing()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::joining(string $glue)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::counting()")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Collectors::averaging()"))))}o.isMDXComponent=!0},166:function(e,t,l){"use strict";l.d(t,"a",(function(){return c})),l.d(t,"b",(function(){return p}));var n=l(0),a=l.n(n),r=a.a.createContext({}),i=function(e){var t=a.a.useContext(r),l=t;return e&&(l="function"==typeof e?e(t):Object.assign({},t,e)),l},c=function(e){var t=i(e.components);return a.a.createElement(r.Provider,{value:t},e.children)};var b="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,b=function(e,t){var l={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(l[n]=e[n]);return l}(e,["components","mdxType","originalType","parentName"]),u=i(l),p=n,s=u[c+"."+p]||u[p]||o[p]||r;return l?a.a.createElement(s,Object.assign({},{ref:t},b,{components:l})):a.a.createElement(s,Object.assign({},{ref:t},b))}));function p(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,i=new Array(r);i[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[b]="string"==typeof e?e:n,i[1]=c;for(var p=2;p<r;p++)i[p]=l[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,l)}u.displayName="MDXCreateElement"}}]);