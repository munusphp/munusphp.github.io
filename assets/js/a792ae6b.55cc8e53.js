(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[536],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r().createContext({}),u=function(e){var t=r().useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r().createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r().createElement(r().Fragment,{},t)}},f=r().forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),f=a,d=c["".concat(i,".").concat(f)]||c[f]||m[f]||l;return n?r().createElement(d,o(o({ref:t},s),{},{components:n})):r().createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r().createElement.apply(null,i)}return r().createElement.apply(null,n)}f.displayName="MDXCreateElement"},382:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),i=["components"],o={id:"map",title:"Map",sidebar_label:"Map"},p={unversionedId:"map",id:"map",isDocsHomePage:!1,title:"Map",description:"Map is a specific collection. It differs slightly from the other collections because",source:"@site/docs/map.md",sourceDirName:".",slug:"/map",permalink:"/docs/map",version:"current",sidebar_label:"Map",frontMatter:{id:"map",title:"Map",sidebar_label:"Map"},sidebar:"docs",previous:{title:"GenericList",permalink:"/docs/list"}},s=[{value:"Construction",id:"construction",children:[]},{value:"Value extraction",id:"value-extraction",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Differences",id:"differences",children:[]}],u={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Map is a specific collection. It differs slightly from the other collections because\nit consists not only of the value (V) but also of the key (K).\nThe current implementation allows only string keys."),(0,l.kt)("h2",{id:"construction"},"Construction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$map = Map::fromArray(['key1' => 'value1', 'key2' => 'value2']);\n")),(0,l.kt)("p",null,"You can also create empty map and put values to it using ",(0,l.kt)("inlineCode",{parentName:"p"},"put")," method:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$map = Map::empty();\n$map = $map->put('php', 'is awesome');\n")),(0,l.kt)("p",null,"Remember that ",(0,l.kt)("inlineCode",{parentName:"p"},"put")," will not modify ",(0,l.kt)("inlineCode",{parentName:"p"},"Map"),", instead of it will return new ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," instance with one more key."),(0,l.kt)("h2",{id:"value-extraction"},"Value extraction"),(0,l.kt)("p",null,"To get value for given key use ",(0,l.kt)("inlineCode",{parentName:"p"},"get")," method. It will return ",(0,l.kt)("inlineCode",{parentName:"p"},"Option")," object which will be empty for non-existing key."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$map = Map::fromArray(['php' => 'is awesome']);\n\n$map->get('php'); // returns Some('is awesome')\n$map->get('hph'); // returns None()\n")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("p",null,"Map contains couple specific methods (in addition to those normally available for any ",(0,l.kt)("inlineCode",{parentName:"p"},"Traverasable"),"):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"put(string $key, $value): self")," - add value for given key and returns new map instance (if key exist value will be replaces with newer one)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"remove(string $key): self")," - removes existing key and returns new map instance (or same if key not exists)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mapKeys(callable $keyMapper): self")," - maps all keys with given $keyMapper"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mapValues(callable $valueMapper): self")," - maps all values with given $valueMapper"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"merge(self $map): self")," - merge with other map, if collisions occur, the value of this map is taken"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containsKey(string $key): bool")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"containsValue($value): bool"))),(0,l.kt)("h2",{id:"differences"},"Differences"),(0,l.kt)("p",null,"Unlike other traversables, the ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," behaves differently for several methods."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"contains($element): bool")," method will search for Tuple of key and value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$map = Map::fromArray(['a' => 'b', 'c' => 'd']);\n$map->contains(Tuple::of('a', 'b')); //return true\n$map->contains(Tuple::of('a', 'c')); //return false\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"head()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tail()")," will return first and last tuple of key and value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$map = Map::fromArray(['a' => 'b', 'c' => 'd', 'e' => 'f']);\n$map->head(); //return Tuple::of('a', 'b')\n$map->tail(); //return Tuple::of('e', 'f')\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"map()")," and other iterable extension with ",(0,l.kt)("inlineCode",{parentName:"p"},"callable")," as argument will receive ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," as argument."))}c.isMDXComponent=!0}}]);