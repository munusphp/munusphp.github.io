(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[120],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a().createContext({}),c=function(e){var t=a().useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a().createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a().createElement(a().Fragment,{},t)}},d=a().forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?a().createElement(f,l(l({ref:t},p),{},{components:n})):a().createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a().createElement.apply(null,i)}return a().createElement.apply(null,n)}d.displayName="MDXCreateElement"},7978:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],l={id:"set",title:"Set",sidebar_label:"Set"},s={unversionedId:"set",id:"set",isDocsHomePage:!1,title:"Set",description:"Data structure which only holds unique values. Set is implemented as immutable array.",source:"@site/docs/set.md",sourceDirName:".",slug:"/set",permalink:"/docs/set",version:"current",sidebar_label:"Set",frontMatter:{id:"set",title:"Set",sidebar_label:"Set"},sidebar:"docs",previous:{title:"Lazy",permalink:"/docs/lazy"},next:{title:"Stream",permalink:"/docs/stream"}},p=[{value:"Construction",id:"construction",children:[]},{value:"Methods",id:"methods",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Data structure which only holds unique values. Set is implemented as immutable array."),(0,o.kt)("h2",{id:"construction"},"Construction"),(0,o.kt)("p",null,"Use one of three available named constructors: ",(0,o.kt)("inlineCode",{parentName:"p"},"empty"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"of")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ofAll")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"Set::empty();\nSet::of('first', 'second');\nSet::ofAll(['alpha', 'beta']);\n")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("p",null,"You can ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," new element, ",(0,o.kt)("inlineCode",{parentName:"p"},"remove")," existing one and check if given ",(0,o.kt)("inlineCode",{parentName:"p"},"$element")," exist with ",(0,o.kt)("inlineCode",{parentName:"p"},"contains"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$set = Set::of('alpha');\n\n$set2 = $set->add('beta');\n$set3 = $set2->remove('beta');\n\n$set->contains('alhpa'); // true\n")),(0,o.kt)("p",null,"If given ",(0,o.kt)("inlineCode",{parentName:"p"},"$element")," already exists in set, same instance will be returned."),(0,o.kt)("p",null,"You can also join two sets with ",(0,o.kt)("inlineCode",{parentName:"p"},"union"),". The merged set will contain only unique values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$set = Set::of('alpha');\n$set2 = Set::of('alpha', 'beta');\n\n$set->union($set2); // 'alpha', 'beta'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"diff")," returns a set containing all the entries from set that are not present in given set:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$set = Set::of('alpha', 'beta', 'gamma');\n$set = $set->diff(Set::of('beta', 'gamma', 'delta'));\n// set is now Set::of('alpha');\n")))}u.isMDXComponent=!0}}]);