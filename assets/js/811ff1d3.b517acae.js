(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[538],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294),l=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=l().createContext({}),s=function(e){var t=l().useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return l().createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l().createElement(l().Fragment,{},t)}},d=l().forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,f=c["".concat(i,".").concat(d)]||c[d]||m[d]||a;return n?l().createElement(f,o(o({ref:t},p),{},{components:n})):l().createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return l().createElement.apply(null,i)}return l().createElement.apply(null,n)}d.displayName="MDXCreateElement"},542:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var r=n(2122),l=n(9756),a=(n(7294),n(3905)),i=["components"],o={id:"tuple",title:"Tuple",sidebar_label:"Tuple"},u={unversionedId:"tuple",id:"tuple",isDocsHomePage:!1,title:"Tuple",description:"Tuples are simply a finite, ordered sequence of elements.",source:"@site/docs/tuple.md",sourceDirName:".",slug:"/tuple",permalink:"/docs/tuple",version:"current",sidebar_label:"Tuple",frontMatter:{id:"tuple",title:"Tuple",sidebar_label:"Tuple"},sidebar:"docs",previous:{title:"Data structures",permalink:"/docs/data-structures"},next:{title:"Match",permalink:"/docs/match"}},p=[{value:"Construction",id:"construction",children:[]},{value:"Methods",id:"methods",children:[]}],s={toc:p};function c(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tuples are simply a finite, ordered sequence of elements."),(0,a.kt)("h2",{id:"construction"},"Construction"),(0,a.kt)("p",null,"To create new ",(0,a.kt)("inlineCode",{parentName:"p"},"Tuple")," use named constructor ",(0,a.kt)("inlineCode",{parentName:"p"},"of"),"\nwhich accepts a variable number of arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$tuple = Tuple::of('Munus', 'is', 'awesome');\n$tuple = Tuple::of('currentTime', new \\DateTimeImmutable());\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Tuple")," implements built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"ArrayAccess")," interface. This will allow to use it like normal array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$tuple = Tuple::of(4, 2);\n$tuple[0]; // holds 4\n$tuple[1]; // holds 2\n")),(0,a.kt)("p",null,"Tuples in Munus are immutable. This means that the assignment instruction will end with an exception:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$tuple = Tuple::of('Munus', 'is', 'awesome');\n$tuple[1] = 'is not'; // UnsupportedOperationException will be thrown\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arity(): int")," - returns the number of elements in this tuple"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"toArray(): array")," - converts tuple to php classic array"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"append($value): self")," - appends new $value to the end and returns new Tuple"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"concat(self $tuple): self")," - merge one tuple with other tuple and returns new one"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"apply(callable $transformer)")," - transforms tuple with given $transformer, transformer will receive array in the argument"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map(callable $mapper): self")," - maps tuple to other tuple"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"equals(self $tuple): bool")," - return true if given tuple contains identical values in identical order")))}c.isMDXComponent=!0}}]);