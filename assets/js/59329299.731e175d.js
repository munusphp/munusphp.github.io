(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[250],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i().createContext({}),u=function(e){var t=i().useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return i().createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i().createElement(i().Fragment,{},t)}},m=i().forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?i().createElement(f,o(o({ref:t},c),{},{components:n})):i().createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i().createElement.apply(null,l)}return i().createElement.apply(null,n)}m.displayName="MDXCreateElement"},7901:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),l=["components"],o={id:"list",title:"GenericList",sidebar_label:"GenericList"},s={unversionedId:"list",id:"list",isDocsHomePage:!1,title:"GenericList",description:"Unfortunately the List is a reserved keyword in PHP so the list in Munus is simply called GenericList.",source:"@site/docs/list.md",sourceDirName:".",slug:"/list",permalink:"/docs/list",version:"current",sidebar_label:"GenericList",frontMatter:{id:"list",title:"GenericList",sidebar_label:"GenericList"},sidebar:"docs",previous:{title:"Stream",permalink:"/docs/stream"},next:{title:"Map",permalink:"/docs/map"}},c=[{value:"Construction",id:"construction",children:[]},{value:"Methods",id:"methods",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Unfortunately the ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," is a reserved keyword in PHP so the list in Munus is simply called ",(0,a.kt)("inlineCode",{parentName:"p"},"GenericList"),"."),(0,a.kt)("p",null,"An immutable ",(0,a.kt)("inlineCode",{parentName:"p"},"GenericList")," is an eager sequence of elements.\nIts immutability makes it suitable for concurrent programming (which not directly supported in PHP ;))."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GenericList")," is composed of a head and a tail. Head contains first value, tail is another list instance.\nThe list has two implementations available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Nil")," which stand for empty list"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Cons")," which stand for a list with one or more elements (consisting of a head and tail)")),(0,a.kt)("h2",{id:"construction"},"Construction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$list = GenericList::empty();\n$list = GenericList::of(1, 2, 3);\n$list = GenericList::ofAll([1, 2, 3]);\n")),(0,a.kt)("p",null,"You can also create ",(0,a.kt)("inlineCode",{parentName:"p"},"GenericList")," for a range of numbers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$list = GenericList::range(2, 15);\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("p",null,"List contains couple specific methods (in addition to those normally available for any ",(0,a.kt)("inlineCode",{parentName:"p"},"Traverasable"),"):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prepend($element): self")," - add $element to the begging of list and returns new instance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"append($element): self")," - add $element to the end of list and returns new instance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reverse(): self")," - change the order of elements to reverse and returns new instance")))}p.isMDXComponent=!0}}]);