(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[613],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a().createContext({}),c=function(e){var t=a().useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a().createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a().createElement(a().Fragment,{},t)}},f=a().forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,d=u["".concat(o,".").concat(f)]||u[f]||m[f]||i;return n?a().createElement(d,l(l({ref:t},s),{},{components:n})):a().createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a().createElement.apply(null,o)}return a().createElement.apply(null,n)}f.displayName="MDXCreateElement"},6329:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],l={id:"generic-types",title:"Generic types",sidebar_label:"Generic types"},p={unversionedId:"generic-types",id:"generic-types",isDocsHomePage:!1,title:"Generic types",description:"Generic types allow us to reuse the same code for different types.",source:"@site/docs/generic-types.md",sourceDirName:".",slug:"/generic-types",permalink:"/docs/generic-types",version:"current",sidebar_label:"Generic types",frontMatter:{id:"generic-types",title:"Generic types",sidebar_label:"Generic types"},sidebar:"docs",previous:{title:"Functional programming",permalink:"/docs/functional-programming"},next:{title:"Data structures",permalink:"/docs/data-structures"}},s=[],c={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Generic types allow us to reuse the same code for different types.\nThe implementation of generic types is usually based on a template.\nFor a given type or class, we generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," template, which can be used safely further."),(0,i.kt)("p",null,"Generic types do not exist in PHP.\nIn 2016 this ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.php.net/rfc/generics"},"RFC")," was created, but at this moment it is not known if and when it will be implemented."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Munus")," uses ",(0,i.kt)("em",{parentName:"p"},"docblock")," from PHPStan or Psalm. We can use this tools to analyse our code for type safe.\nIn the following example, we will declare a template type T for ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," class, and use it in ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," method as return param:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @template T\n */\nclass Value\n{\n    /** @var T */\n    private $value;\n    \n    /**\n     * @param T $value\n     */\n    public function __construct($value) {\n        $this->value = $value;\n    }\n\n    /**\n     * @return T\n     */\n    public function get()\n    {\n        return $this->value;\n    }\n}\n")),(0,i.kt)("p",null,"Now ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," is our generic wrapper for any kind of type. For example we can create ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," or even ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime")," type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$int = new Value(42);\n$int->get(); // static analysis tool will now that get returns int\n\n$string = new Value('munus');\n$string->get(); // static analysis tool will now that get returns string\n\n$date = new Value(new \\DateTime());\n$date->get(); // static analysis tool will now that get returns DateTime\n")),(0,i.kt)("p",null,"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," in Munus is generic."))}u.isMDXComponent=!0}}]);