(self.webpackChunkmunus_webiste=self.webpackChunkmunus_webiste||[]).push([[194],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a().createContext({}),p=function(e){var n=a().useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return a().createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a().createElement(a().Fragment,{},n)}},f=a().forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=p(t),f=r,d=s["".concat(o,".").concat(f)]||s[f]||m[f]||i;return t?a().createElement(d,l(l({ref:n},u),{},{components:t})):a().createElement(d,l({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return a().createElement.apply(null,o)}return a().createElement.apply(null,t)}f.displayName="MDXCreateElement"},6122:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return s}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],l={id:"functional-programming",title:"Functional programming",sidebar_label:"Functional programming"},c={unversionedId:"functional-programming",id:"functional-programming",isDocsHomePage:!1,title:"Functional programming",description:"Functional paradigm",source:"@site/docs/functional-programming.md",sourceDirName:".",slug:"/functional-programming",permalink:"/docs/functional-programming",version:"current",sidebar_label:"Functional programming",frontMatter:{id:"functional-programming",title:"Functional programming",sidebar_label:"Functional programming"},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/start"},next:{title:"Generic types",permalink:"/docs/generic-types"}},u=[{value:"Functional paradigm",id:"functional-paradigm",children:[]},{value:"Functional programming in PHP",id:"functional-programming-in-php",children:[]}],p={toc:u};function s(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"functional-paradigm"},"Functional paradigm"),(0,i.kt)("p",null,"Functional programming is one of three available programming paradigms (the other two are structural and object-oriented programming).\nIt was created before the first computer program was written.\nIt is a direct consequence of the work of Alonzo Church, who invented the lambda calculus."),(0,i.kt)("p",null,"The fundamental characteristic of the lambda account is immutability. No value or symbol can change."),(0,i.kt)("p",null,"This one feature makes the functional approach lacking assignment instructions.\nIn fact, it is available, but it is nevertheless subject to very strict discipline. "),(0,i.kt)("h2",{id:"functional-programming-in-php"},"Functional programming in PHP"),(0,i.kt)("p",null,"PHP supports classic concepts from the functional world, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"first-class function (function can be assigned to a variable, can be referenced by a variable and invoked dynamically)"),(0,i.kt)("li",{parentName:"ul"},"recursion (allows a function to call itself)"),(0,i.kt)("li",{parentName:"ul"},"anonymous functions (with support for closures and ability to bind closures to an object\u2019s scope)"),(0,i.kt)("li",{parentName:"ul"},"higher-order functions (such as ",(0,i.kt)("inlineCode",{parentName:"li"},"array_filter")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"array_map"),")")),(0,i.kt)("p",null,"Below we can see a simple example of using several of them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"function criteria_lower_than($max)\n{\n    return function($item) use ($max) {\n        return $item < $max;\n    };\n}\n\n$input = [1, 2, 3, 4, 5, 6];\n$output = array_filter($input, criteria_lower_than(4));\n// 1, 2, 3\n")),(0,i.kt)("p",null,"Unfortunately, despite this, there is no common interface to seamlessly connect all aspects of the functional world.\nThere are also other problems:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"not every function guarantees immutability (",(0,i.kt)("inlineCode",{parentName:"li"},"array_map")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"sort"),")"),(0,i.kt)("li",{parentName:"ul"},"difference in order of parameters (",(0,i.kt)("inlineCode",{parentName:"li"},"array_filter")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"array_map"),")"),(0,i.kt)("li",{parentName:"ul"},"lack of fluent interface (",(0,i.kt)("inlineCode",{parentName:"li"},"array_*")," hell)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Munus")," tries to solve these and other problems so that you can enjoy the joy of\nfunctional programming in a fully object oriented style."))}s.isMDXComponent=!0}}]);