(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{152:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return c}));t(51),t(24),t(19),t(20),t(52),t(0);var a=t(166);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var l={id:"map",title:"Map",sidebar_label:"Map"},i=[{value:"Construction",id:"construction",children:[]},{value:"Value extraction",id:"value-extraction",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Differences",id:"differences",children:[]}],p={rightToc:i},o="wrapper";function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(o,r({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Map is a specific collection. It differs slightly from the other collections because\nit consists not only of the value (V) but also of the key (K).\nThe current implementation allows only string keys."),Object(a.b)("h2",{id:"construction"},"Construction"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$map = Map::fromArray(['key1' => 'value1', 'key2' => 'value2']);\n")),Object(a.b)("p",null,"You can also create empty map and put values to it using ",Object(a.b)("inlineCode",{parentName:"p"},"put")," method:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$map = Map::empty();\n$map = $map->put('php', 'is awesome');\n")),Object(a.b)("p",null,"Remember that ",Object(a.b)("inlineCode",{parentName:"p"},"put")," will not modify ",Object(a.b)("inlineCode",{parentName:"p"},"Map"),", instead of it will return new ",Object(a.b)("inlineCode",{parentName:"p"},"Map")," instance with one more key."),Object(a.b)("h2",{id:"value-extraction"},"Value extraction"),Object(a.b)("p",null,"To get value for given key use ",Object(a.b)("inlineCode",{parentName:"p"},"get")," method. It will return ",Object(a.b)("inlineCode",{parentName:"p"},"Option")," object which will be empty for non-existing key."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$map = Map::fromArray(['php' => 'is awesome']);\n\n$map->get('php'); // returns Some('is awesome')\n$map->get('hph'); // returns None()\n")),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("p",null,"Map contains couple specific methods (in addition to those normally available for any ",Object(a.b)("inlineCode",{parentName:"p"},"Traverasable"),"):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"put(string $key, $value): self")," - add value for given key and returns new map instance (if key exist value will be replaces with newer one)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"remove(string $key): self")," - removes existing key and returns new map instance (or same if key not exists)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mapKeys(callable $keyMapper): self")," - maps all keys with given $keyMapper"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"mapValues(callable $valueMapper): self")," - maps all values with given $valueMapper"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"merge(self $map): self")," - merge with other map, if collisions occur, the value of this map is taken"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"containsKey(string $key): bool")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"containsValue($value): bool"))),Object(a.b)("h2",{id:"differences"},"Differences"),Object(a.b)("p",null,"Unlike other traversables, the ",Object(a.b)("inlineCode",{parentName:"p"},"Map")," behaves differently for several methods."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"contains($element): bool")," method will search for Tuple of key and value:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$map = Map::fromArray(['a' => 'b', 'c' => 'd']);\n$map->contains(Tuple::of('a', 'b')); //return true\n$map->contains(Tuple::of('a', 'c')); //return false\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"head()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"tail()")," will return first and last tuple of key and value:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$map = Map::fromArray(['a' => 'b', 'c' => 'd', 'e' => 'f']);\n$map->head(); //return Tuple::of('a', 'b')\n$map->tail(); //return Tuple::of('e', 'f')\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"map()")," and other iterable extension with ",Object(a.b)("inlineCode",{parentName:"p"},"callable")," as argument will receive ",Object(a.b)("inlineCode",{parentName:"p"},"Tuple")," as argument."))}c.isMDXComponent=!0},166:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a),l=r.a.createContext({}),i=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},p=function(e){var n=i(e.components);return r.a.createElement(l.Provider,{value:n},e.children)};var o="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,o=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),b=i(t),u=a,s=b[p+"."+u]||b[u]||c[u]||l;return t?r.a.createElement(s,Object.assign({},{ref:n},o,{components:t})):r.a.createElement(s,Object.assign({},{ref:n},o))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=b;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[o]="string"==typeof e?e:a,i[1]=p;for(var u=2;u<l;u++)i[u]=t[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);