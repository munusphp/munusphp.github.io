(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{159:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return p}));t(51),t(24),t(19),t(20),t(52),t(0);var a=t(166);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var o={id:"set",title:"Set",sidebar_label:"Set"},i=[{value:"Construction",id:"construction",children:[]},{value:"Methods",id:"methods",children:[]}],l={rightToc:i},c="wrapper";function p(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(c,r({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Data structure which only holds unique values. Set is implemented as immutable array."),Object(a.b)("h2",{id:"construction"},"Construction"),Object(a.b)("p",null,"Use one of three available named constructors: ",Object(a.b)("inlineCode",{parentName:"p"},"empty"),", ",Object(a.b)("inlineCode",{parentName:"p"},"of")," or ",Object(a.b)("inlineCode",{parentName:"p"},"ofAll")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"Set::empty();\nSet::of('first', 'second');\nSet::ofAll(['alpha', 'beta']);\n")),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("p",null,"You can ",Object(a.b)("inlineCode",{parentName:"p"},"add")," new element, ",Object(a.b)("inlineCode",{parentName:"p"},"remove")," existing one and check if given ",Object(a.b)("inlineCode",{parentName:"p"},"$element")," exist with ",Object(a.b)("inlineCode",{parentName:"p"},"contains"),"."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$set = Set::of('alpha');\n\n$set2 = $set->add('beta');\n$set3 = $set2->remove('beta');\n\n$set->contains('alhpa'); // true\n")),Object(a.b)("p",null,"If given ",Object(a.b)("inlineCode",{parentName:"p"},"$element")," already exists in set, same instance will be returned."),Object(a.b)("p",null,"You can also join two sets with ",Object(a.b)("inlineCode",{parentName:"p"},"union"),". The merged set will contain only unique values."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$set = Set::of('alpha');\n$set2 = Set::of('alpha', 'beta');\n\n$set->union($set2); // 'alpha', 'beta'\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"diff")," returns a set containing all the entries from set that are not present in given set:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$set = Set::of('alpha', 'beta', 'gamma');\n$set = $set->diff(Set::of('beta', 'gamma', 'delta'));\n// set is now Set::of('alpha');\n")))}p.isMDXComponent=!0},166:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a),o=r.a.createContext({}),i=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=i(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},s=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),s=i(t),u=a,b=s[l+"."+u]||s[u]||p[u]||o;return t?r.a.createElement(b,Object.assign({},{ref:n},c,{components:t})):r.a.createElement(b,Object.assign({},{ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=s;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);