(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{137:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));t(51),t(24),t(19),t(20),t(52),t(0);var a=t(162);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var i={id:"traversable",title:"Traversable",sidebar_label:"Traversable"},l=[{value:"Traversable",id:"traversable",children:[{value:"Set",id:"set",children:[]},{value:"Stream",id:"stream",children:[]},{value:"GenericList",id:"genericlist",children:[]}]}],c={rightToc:l},o="wrapper";function s(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(o,r({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"traversable"},"Traversable"),Object(a.b)("p",null,"Each collection in ",Object(a.b)("strong",{parentName:"p"},"Munus")," extends the ",Object(a.b)("inlineCode",{parentName:"p"},"Traversable")," class."),Object(a.b)("h3",{id:"set"},"Set"),Object(a.b)("p",null,"Data structure which only holds unique values. Set is implemented as immutable array."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"Set::empty();\nSet::of('first', 'second');\nSet::ofAll(['alpha', 'beta']);\n")),Object(a.b)("p",null,"You can ",Object(a.b)("inlineCode",{parentName:"p"},"add")," new element, ",Object(a.b)("inlineCode",{parentName:"p"},"remove")," existing one and check if given ",Object(a.b)("inlineCode",{parentName:"p"},"$element")," exist with ",Object(a.b)("inlineCode",{parentName:"p"},"contains"),"."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$set = Set::of('alpha');\n\n$set2 = $set->add('beta');\n$set3 = $set2->remove('beta');\n\n$set->contains('alhpa'); // true\n")),Object(a.b)("p",null,"You can also join two sets with ",Object(a.b)("inlineCode",{parentName:"p"},"union"),". The merged set will contain only unique values."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$set = Set::of('alpha');\n$set2 = Set::of('alpha', 'beta');\n\n$set->union($set2); // 'alpha', 'beta'\n")),Object(a.b)("h3",{id:"stream"},"Stream"),Object(a.b)("h3",{id:"genericlist"},"GenericList"))}s.isMDXComponent=!0},162:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a),i=r.a.createContext({}),l=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=l(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var o="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),p=l(t),u=a,b=p[c+"."+u]||p[u]||s[u]||i;return t?r.a.createElement(b,Object.assign({},{ref:n},o,{components:t})):r.a.createElement(b,Object.assign({},{ref:n},o))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[o]="string"==typeof e?e:a,l[1]=c;for(var u=2;u<i;u++)l[u]=t[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);